import os

import sympy.physics.units.definitions as u
from sympy.physics.units.quantities import Quantity
from sympy.physics.units.systems.si import dimsys_SI

from mathpad.physical_quantity import PhysicalQuantity
import mathpad.physical_quantities as dims

HERE = os.path.dirname(__file__)

AUTOGEN_WARNING = '"WARNING: this file was automatically generated by commented code within mathpad.py"\n'

print("writing to " + f"{HERE}/units.py\nand {HERE}/constants.py")

with open(f"{HERE}/units.py", "w") as units_f, open(
    f"{HERE}/constants.py", "w"
) as constants_f:

    # top of 'units.py'
    units_f.write(AUTOGEN_WARNING)
    units_f.write("import sympy.physics.units.definitions.unit_definitions as u\n")
    units_f.write("from .physical_quantities import *\n")

    # top of 'constants.py'
    constants_f.write(AUTOGEN_WARNING)
    constants_f.write("import sympy.physics.units.definitions.unit_definitions as u\n")
    constants_f.write("from .physical_quantities import *\n")

    def write_constant():
        return constants_f.write(
            f"""
{name} = PhysicalQuantity(u.{name}, 1, u.{name}.dimension)"""
        )

    for name in dir(u):
        qty = getattr(u, name)

        if isinstance(qty, Quantity):
            if qty == u.angular_mil:
                # TODO: try to get angular_mil working. Skip for now
                continue

            if not name.endswith("_constant"):
                # match this quantity to its measurement dimension for type checking
                for quantity_cls_name in dir(dims):
                    quantity_cls = getattr(dims, quantity_cls_name)
                    if (
                        isinstance(quantity_cls, type)
                        and issubclass(quantity_cls, PhysicalQuantity)
                        and quantity_cls is not PhysicalQuantity
                        and dimsys_SI.equivalent_dims(
                            qty.dimension, quantity_cls.dimension
                        )
                    ):
                        units_f.write(
                            f"""
{name} = {quantity_cls_name}(u.{name})"""
                        )
                        break
                else:
                    write_constant()

                continue

            else:
                write_constant()
